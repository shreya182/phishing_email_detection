{"version":3,"file":"background.bundle.js","mappings":";;;;;;;;;AAAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtsources":["webpack://phishing-warning-extension/ignored|/Users/Shreya/Downloads/phishing-warning-extension|crypto","webpack://phishing-warning-extension/webpack/bootstrap","webpack://phishing-warning-extension/./background.js"],"sourcesContent":["/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","chrome.runtime.onInstalled.addListener(() => {\n  console.log('Email Phishing Scanner installed');\n});\n\nchrome.action.onClicked.addListener((tab) => {\n  console.log('HELLOOOO');\n  chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    function: checkGmailUrl\n  });\n});\n\nasync function checkGmailUrl() {\n  const url = 'http://gmail.com';\n  chrome.runtime.sendMessage({ action: 'checkUrl', url: url }, (response) => {\n    if (response) {\n      if (response.safe === false) {\n        console.log(`Potential Phishing Link: ${url}`);\n      } else if (response.safe === true) {\n        console.log(`This link is safe: ${url}`);\n      } else if (response.error) {\n        console.error(`Error checking URL: ${url}`, response.error);\n      }\n    } else {\n      console.error(`No response received from background script for URL: ${url}`);\n    }\n  });\n}\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'checkUrl') {\n    checkUrlSafety(message.url)\n      .then(isSafe => {\n        sendResponse({ safe: isSafe });\n      })\n      .catch(error => {\n        console.error('Error checking URL:', error);\n        sendResponse({ error: 'Error checking URL' });\n      });\n    return true; // Keep the message channel open for sendResponse\n  }\n});\n\nasync function checkUrlSafety(url) {\n  const apiKey = 'AIzaSyAtleXDB1YoCK1VB32lAFYMqB_PCQ3BUHE';\n  const hashPrefix = getHashPrefix(url); // You need to implement this function to get the hash prefix\n  const response = await fetch(`https://safebrowsing.googleapis.com/v5/hashes:search?key=${apiKey}&hashPrefixes=${hashPrefix}`);\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n\n  const responseBody = await response.json();\n  // Implement your logic to determine if the URL is safe based on the response body\n  return responseBody.matches && responseBody.matches.length > 0 ? false : true;\n}\n\nfunction getHashPrefix(url) {\n  const crypto = require('crypto');\n  const hash = crypto.createHash('sha256');\n  hash.update(url);\n  const fullHash = hash.digest('hex');\n  return fullHash.substring(0, 4); // Use the first 4 bytes as the hash prefix\n}\n"],"names":[],"sourceRoot":""}